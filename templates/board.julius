var board,
  game,
  statusEl = $('#status')

var removeGreySquares = function() {
  for (var i = 0; i < allMoves.length; i++) {
    $('#board .square-' + allMoves[i]).css('background', '');
  }
};

var greySquare = function(square) {
  var squareEl = $('#board .square-' + square);
  
  var background = '#a9a9a9';
  if (squareEl.hasClass('black-3c85d') === true) {
    background = '#696969';
  }

  squareEl.css('background', background);
};

var makeFogSquares = function(square) {
  var squareEl = $('#board .square-' + square);
  squareEl.find('img').remove();
  
  var background = '#646464';
  if (squareEl.hasClass('black-3c85d') === true) {
    background = '#131313';
  }

  squareEl.css('background', background);
}



// do not pick up pieces if the game is over
// only pick up pieces for the side to move
var onDragStart = function(source, piece, position, orientation) {
  if (game.game_over() === true ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
      game.turn() !== myColor) {
    return false;
  }
};

var onDrop = function(source, target) {
  removeGreySquares();
  // see if the move is legal
  var move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  });

  // illegal move
  if (move === null) return 'snapback';

  updateStatus();
  $.post("@{BoardR gid}", { fen: game.fen() });
};

var getAllMoves = function() {
  var squares = []
  for (var i = 0; i < game.SQUARES.length; i++) {
    if(game.get(game.SQUARES[i]) !== null && game.get(game.SQUARES[i]).color === myColor) {
      squares.push(game.SQUARES[i]);
      var moves = game.moves({
        square: game.SQUARES[i],
        verbose: true
      });

      for (var j = 0; j < moves.length; j++) {
        squares.push(moves[j].to);
      }
    }
  }
  return squares;
}


var onMouseoverSquare = function(square, piece) {
  if(game.turn() !== "#{rawJS color}"[0]) return false;
  // get list of possible moves for this square
  var moves = game.moves({
    square: square,
    verbose: true
  });

  // exit if there are no moves available for this square
  if (moves.length === 0) return;

  // highlight the square they moused over
  greySquare(square);

  // highlight the possible squares for this piece
  for (var i = 0; i < moves.length; i++) {
    greySquare(moves[i].to);
  }
};

var onMouseoutSquare = function(square, piece) {
  removeGreySquares();
};

// update the board position after the piece snap 
// for castling, en passant, pawn promotion
var onSnapEnd = function() {
  board.position(game.fen());
  fogMoves.map(makeFogSquares);
};

var onSnapbackEnd = function() {
  fogMoves.map(makeFogSquares);
}

var updateStatus = function() {
  var status = '';

  var moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }

  // checkmate?
  if (game.in_checkmate() === true) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  }

  // draw?
  else if (game.in_draw() === true) {
    status = 'Game over, drawn position';
  }

  // game still on
  else {
    status = moveColor + ' to move';

    // check?
    if (game.in_check() === true) {
      status += ', ' + moveColor + ' is in check';
    }
  }

  statusEl.html(status);
};

var myColor = "#{rawJS color}"[0]
var fen = "#{rawJS $ moveFen $ entityVal move}"
var fake_fen = fen.split(' ')
fake_fen[1] = myColor
var old_fen = fake_fen.join(' ')

var cfg = {
  showNotation: false,
  draggable: true,
  position: fen,
  orientation: "#{rawJS color}",
  onDragStart: onDragStart,
  onDrop: onDrop,
  onMouseoutSquare: onMouseoutSquare,
  onMouseoverSquare: onMouseoverSquare,
  onSnapEnd: onSnapEnd,
  onSnapbackEnd: onSnapbackEnd,
  onMoveEnd: onSnapbackEnd,
};
board = new ChessBoard('board', cfg);
game = new Chess(old_fen);

var allMoves = getAllMoves();
var fogMoves = _.difference(game.SQUARES, allMoves);
fogMoves.map(makeFogSquares);

game.load(fen)
updateStatus();
